package hashtable;

import java.util.LinkedList;

/**
 * This class contains a generic hash table and its methods
 * @author Byron Jones
 *
 * @param <E> - Generic type
 */
public class HashtableChained<E> { // This class contains a generic hash table and its methods
	private LinkedList<LinkedList<E>> hashtable; // declares hash table as chained linked list
	
	/**
	 * Default constructor creating a hash table with initial capacity
	 */
	public HashtableChained() { // implements a chained hash table using linked lists
		hashtable = new LinkedList<LinkedList<E>>();
		for (int i = 0; i < 25; i++) { // loops through adding a linked list to each of the 25 elements
			hashtable.add(new LinkedList<E>()); // adds a linked list of generic type
		}
	}
	
	/**
	 * Adds key to hash table
	 * @param key is the key to be added
	 */
	public void add(E key) { // adds a key to hash table
		int hashKey = hashFunction(key); // stores the hashed key from hashFunction()
		hashtable.get(hashKey).add(key); // adds hashed key to hash table
	}
	
	/**
	 * Checks if value is present with given key
	 * @param key passed postal code prefix
	 * @return true if  key found or false if not
	 */
	public boolean contains(E key) { // check if value is present with given key
		for (LinkedList<E> tableList : hashtable) { // creates a linked list of each element of hash table
			for (E entry : tableList) { // checks if key matches table list entry
				if (entry.equals(key)) // key is found in hash table
					return true; // key is found
			}
		}
		return false; // key is not found in hash table
	}
	
	/**
	 * Hash function used to generate a hashed key
	 * @param key the passed postal code prefix
	 * @return the hashed key
	 */
	public int hashFunction(E key) { // hash function used to generate a hashed key
		int h = key.hashCode(); // stored the integer generated by hashing algorithm 
		h = h % hashtable.size(); // divides the key by array size and uses remainder as index
		if (h < 0) // inverts value if negative
			h = -h; // inverts value
		return h; // returns the hashed key value
	}
} // End Class
